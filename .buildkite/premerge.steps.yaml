---
agent_transients: &agent_transients
  # This is designed to trap and retry failures because agent lost
  # connection. Agent exits with -1 in this case.
  exit_status: -1
  limit: 3

script_runner: &script_runner
  agents:
  - "agent_count=8"
  - "capable_of_building=platform"
  - "environment=production"
  - "machine_type=quarter"
  - "permission_set=builder"
  - "platform=linux"
  - "queue=${CI_LINUX_BUILDER_QUEUE:-v3-1572524284-e64831bf1e88b227-------z}"
  - "scaler_version=2"
  - "working_hours_time_zone=london"

common: &common
  agents:
    - "agent_count=1"
    - "capable_of_building=gdk-for-unreal"
    - "environment=production"
    - "machine_type=quad-high-cpu"  # this name matches to SpatialOS node-size names
    - "platform=windows"
    - "permission_set=builder"
    - "scaler_version=2"
    - "queue=${CI_WINDOWS_BUILDER_QUEUE:-v4-2019-11-11-bk3891-f17bd2c787d2fe1c}"
  retry:
    automatic:
      - <<: *agent_transients
  timeout_in_minutes: 60
  plugins:
    - ca-johnson/taskkill#v4.1: ~

# NOTE: step labels turn into commit-status names like {org}/{repo}/{pipeline}/{step-label}, lower-case and hyphenated.
# These are then relied on to have stable names by other things, so once named, please beware renaming has consequences.

steps:
  - label: "enforce-version-restrictions"
    command: "ci/check-version-file.sh"
    <<: *script_runner
  # No point in running other steps if the listed versions are invalid
  - wait 

  # Trigger an Example Project build for any merges into master, preview or release branches of UnrealGDK
  - trigger: "unrealgdkexampleproject-nightly"
    label: "post-merge-example-project-build"
    branches: "master preview release"
    async: true
    build:
      env:
        BUILDKITE_NIGHTLY_BUILD: "${BUILDKITE_NIGHTLY_BUILD:-false}"
        GDK_BRANCH: "${BUILDKITE_BRANCH}"

  - label: "generate-pipeline-steps"
    commands:
      - "chmod -R +rwx ci" # give the Linux user access to everything in the ci directory
      - "ci/generate-and-upload-build-steps.sh"
    env:
        ENGINE_VERSION: "${ENGINE_VERSION}"
    <<: *script_runner

  - wait: ~
    continue_on_failure: true

  - label: "upload-test-metrics"
    command: "ci/upload-test-metrics.sh"
    <<: *script_runner

  - label: "slack-notify"
    if: build.env("SLACK_NOTIFY") == "true" || build.branch == "master"
    commands: "powershell ./ci/build-and-send-slack-notification.ps1"
    <<: *common
